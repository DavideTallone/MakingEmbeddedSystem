
Timer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000cb0  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000004  20000000  00000cb0  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000070  20000004  00000cb4  00020004  2**2
                  ALLOC
  3 .stack        00002004  20000074  00000d24  00020004  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY
  6 .debug_info   00015462  00000000  00000000  00020085  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000022fd  00000000  00000000  000354e7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00002ad5  00000000  00000000  000377e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000002e0  00000000  00000000  0003a2b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000002a8  00000000  00000000  0003a599  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00018a47  00000000  00000000  0003a841  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00007334  00000000  00000000  00053288  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0008cbc3  00000000  00000000  0005a5bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00000668  00000000  00000000  000e7180  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
   0:	78 20 00 20 95 09 00 00 91 09 00 00 91 09 00 00     x . ............
	...
  2c:	91 09 00 00 00 00 00 00 00 00 00 00 91 09 00 00     ................
  3c:	91 09 00 00 91 09 00 00 91 09 00 00 91 09 00 00     ................
  4c:	91 09 00 00 91 09 00 00 91 09 00 00 91 09 00 00     ................
  5c:	91 09 00 00 91 09 00 00 91 09 00 00 91 09 00 00     ................
  6c:	91 09 00 00 91 09 00 00 91 09 00 00 91 09 00 00     ................
  7c:	91 09 00 00 91 09 00 00 91 09 00 00 29 04 00 00     ............)...
  8c:	39 04 00 00 49 04 00 00 59 04 00 00 69 04 00 00     9...I...Y...i...
  9c:	91 09 00 00 91 09 00 00 91 09 00 00 91 09 00 00     ................
  ac:	91 09 00 00 00 00 00 00                             ........

000000b4 <__do_global_dtors_aux>:
  b4:	b510      	push	{r4, lr}
  b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
  b8:	7823      	ldrb	r3, [r4, #0]
  ba:	2b00      	cmp	r3, #0
  bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
  be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
  c0:	2b00      	cmp	r3, #0
  c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
  c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
  c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
  c8:	bf00      	nop
  ca:	2301      	movs	r3, #1
  cc:	7023      	strb	r3, [r4, #0]
  ce:	bd10      	pop	{r4, pc}
  d0:	20000004 	.word	0x20000004
  d4:	00000000 	.word	0x00000000
  d8:	00000cb0 	.word	0x00000cb0

000000dc <frame_dummy>:
  dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
  de:	b510      	push	{r4, lr}
  e0:	2b00      	cmp	r3, #0
  e2:	d003      	beq.n	ec <frame_dummy+0x10>
  e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
  e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
  e8:	e000      	b.n	ec <frame_dummy+0x10>
  ea:	bf00      	nop
  ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
  ee:	6803      	ldr	r3, [r0, #0]
  f0:	2b00      	cmp	r3, #0
  f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
  f4:	bd10      	pop	{r4, pc}
  f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
  f8:	2b00      	cmp	r3, #0
  fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
  fc:	4798      	blx	r3
  fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
 100:	00000000 	.word	0x00000000
 104:	20000008 	.word	0x20000008
 108:	00000cb0 	.word	0x00000cb0
 10c:	00000cb0 	.word	0x00000cb0
 110:	00000000 	.word	0x00000000

00000114 <_tc_get_inst_index>:
 *
 * \return Index of the given TC module instance.
 */
uint8_t _tc_get_inst_index(
		Tc *const hw)
{
 114:	b530      	push	{r4, r5, lr}
 116:	b087      	sub	sp, #28
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
 118:	a901      	add	r1, sp, #4
 11a:	4b0c      	ldr	r3, [pc, #48]	; (14c <_tc_get_inst_index+0x38>)
 11c:	000a      	movs	r2, r1
 11e:	cb32      	ldmia	r3!, {r1, r4, r5}
 120:	c232      	stmia	r2!, {r1, r4, r5}
 122:	cb12      	ldmia	r3!, {r1, r4}
 124:	c212      	stmia	r2!, {r1, r4}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
		if (hw == tc_modules[i]) {
 126:	9b01      	ldr	r3, [sp, #4]
 128:	4298      	cmp	r0, r3
 12a:	d00b      	beq.n	144 <_tc_get_inst_index+0x30>
 12c:	2301      	movs	r3, #1
 12e:	a901      	add	r1, sp, #4
 130:	009a      	lsls	r2, r3, #2
 132:	5852      	ldr	r2, [r2, r1]
 134:	4282      	cmp	r2, r0
 136:	d006      	beq.n	146 <_tc_get_inst_index+0x32>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
 138:	3301      	adds	r3, #1
 13a:	2b05      	cmp	r3, #5
 13c:	d1f8      	bne.n	130 <_tc_get_inst_index+0x1c>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
 13e:	2000      	movs	r0, #0
}
 140:	b007      	add	sp, #28
 142:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
 144:	2300      	movs	r3, #0
			return i;
 146:	b2d8      	uxtb	r0, r3
 148:	e7fa      	b.n	140 <_tc_get_inst_index+0x2c>
 14a:	46c0      	nop			; (mov r8, r8)
 14c:	00000c44 	.word	0x00000c44

00000150 <tc_init>:
 */
enum status_code tc_init(
		struct tc_module *const module_inst,
		Tc *const hw,
		const struct tc_config *const config)
{
 150:	b5f0      	push	{r4, r5, r6, r7, lr}
 152:	b089      	sub	sp, #36	; 0x24
 154:	0004      	movs	r4, r0
 156:	000d      	movs	r5, r1
 158:	0016      	movs	r6, r2
	uint8_t ctrlbset_tmp = 0;
	/* Temporary variable to hold all updates to the CTRLC
	 * register before they are written to it */
	uint8_t ctrlc_tmp = 0;
	/* Temporary variable to hold TC instance number */
	uint8_t instance = _tc_get_inst_index(hw);
 15a:	0008      	movs	r0, r1
 15c:	4b85      	ldr	r3, [pc, #532]	; (374 <tc_init+0x224>)
 15e:	4798      	blx	r3
 160:	0007      	movs	r7, r0

	/* Array of GLCK ID for different TC instances */
	uint8_t inst_gclk_id[] = TC_INST_GCLK_ID;
 162:	ab06      	add	r3, sp, #24
 164:	221b      	movs	r2, #27
 166:	701a      	strb	r2, [r3, #0]
 168:	3201      	adds	r2, #1
 16a:	705a      	strb	r2, [r3, #1]
 16c:	709a      	strb	r2, [r3, #2]
 16e:	3201      	adds	r2, #1
 170:	70da      	strb	r2, [r3, #3]
 172:	711a      	strb	r2, [r3, #4]
	/* Array of PM APBC mask bit position for different TC instances */
	uint16_t inst_pm_apbmask[] = TC_INST_PM_APBCMASK;
 174:	aa03      	add	r2, sp, #12
 176:	4b80      	ldr	r3, [pc, #512]	; (378 <tc_init+0x228>)
 178:	3314      	adds	r3, #20
 17a:	cb03      	ldmia	r3!, {r0, r1}
 17c:	c203      	stmia	r2!, {r0, r1}
 17e:	881b      	ldrh	r3, [r3, #0]
 180:	8013      	strh	r3, [r2, #0]
	struct system_gclk_chan_config gclk_chan_config;

#if TC_ASYNC == true
	/* Initialize parameters */
	for (uint8_t i = 0; i < TC_CALLBACK_N; i++) {
		module_inst->callback[i]        = NULL;
 182:	2300      	movs	r3, #0
 184:	60a3      	str	r3, [r4, #8]
 186:	60e3      	str	r3, [r4, #12]
 188:	6123      	str	r3, [r4, #16]
 18a:	6163      	str	r3, [r4, #20]
	}
	module_inst->register_callback_mask     = 0x00;
 18c:	7623      	strb	r3, [r4, #24]
	module_inst->enable_callback_mask       = 0x00;
 18e:	7663      	strb	r3, [r4, #25]

	/* Register this instance for callbacks*/
	_tc_instances[instance] = module_inst;
 190:	00ba      	lsls	r2, r7, #2
 192:	4b7a      	ldr	r3, [pc, #488]	; (37c <tc_init+0x22c>)
 194:	50d4      	str	r4, [r2, r3]
#endif

	/* Associate the given device instance with the hardware module */
	module_inst->hw = hw;
 196:	6025      	str	r5, [r4, #0]
#else
	/* Check if odd numbered TC modules are being configured in 32-bit
	 * counter size. Only even numbered counters are allowed to be
	 * configured in 32-bit counter size.
	 */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
 198:	78b3      	ldrb	r3, [r6, #2]
 19a:	2b08      	cmp	r3, #8
 19c:	d006      	beq.n	1ac <tc_init+0x5c>
#endif

	/* Make the counter size variable in the module_inst struct reflect
	 * the counter size in the module
	 */
	module_inst->counter_size = config->counter_size;
 19e:	7123      	strb	r3, [r4, #4]

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
 1a0:	882b      	ldrh	r3, [r5, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
 1a2:	2005      	movs	r0, #5
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
 1a4:	07db      	lsls	r3, r3, #31
 1a6:	d505      	bpl.n	1b4 <tc_init+0x64>
			return STATUS_OK;
	}

	Assert(false);
	return STATUS_ERR_INVALID_ARG;
}
 1a8:	b009      	add	sp, #36	; 0x24
 1aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return STATUS_ERR_INVALID_ARG;
 1ac:	2017      	movs	r0, #23
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
 1ae:	07fa      	lsls	r2, r7, #31
 1b0:	d5fa      	bpl.n	1a8 <tc_init+0x58>
 1b2:	e7f4      	b.n	19e <tc_init+0x4e>
	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
 1b4:	7beb      	ldrb	r3, [r5, #15]
		return STATUS_ERR_DENIED;
 1b6:	3017      	adds	r0, #23
	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
 1b8:	06db      	lsls	r3, r3, #27
 1ba:	d4f5      	bmi.n	1a8 <tc_init+0x58>
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_ENABLE) {
 1bc:	882b      	ldrh	r3, [r5, #0]
 1be:	079b      	lsls	r3, r3, #30
 1c0:	d4f2      	bmi.n	1a8 <tc_init+0x58>
	if (config->pwm_channel[0].enabled) {
 1c2:	7c33      	ldrb	r3, [r6, #16]
 1c4:	2b00      	cmp	r3, #0
 1c6:	d179      	bne.n	2bc <tc_init+0x16c>
	if (config->pwm_channel[1].enabled) {
 1c8:	7f33      	ldrb	r3, [r6, #28]
 1ca:	2b00      	cmp	r3, #0
 1cc:	d000      	beq.n	1d0 <tc_init+0x80>
 1ce:	e081      	b.n	2d4 <tc_init+0x184>
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
 1d0:	496b      	ldr	r1, [pc, #428]	; (380 <tc_init+0x230>)
 1d2:	6a08      	ldr	r0, [r1, #32]
			inst_pm_apbmask[instance]);
 1d4:	007a      	lsls	r2, r7, #1
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
 1d6:	ab03      	add	r3, sp, #12
 1d8:	5ad3      	ldrh	r3, [r2, r3]
 1da:	4303      	orrs	r3, r0
 1dc:	620b      	str	r3, [r1, #32]
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT))
 1de:	78b3      	ldrb	r3, [r6, #2]
 1e0:	2b08      	cmp	r3, #8
 1e2:	d100      	bne.n	1e6 <tc_init+0x96>
 1e4:	e086      	b.n	2f4 <tc_init+0x1a4>
	gclk_chan_config.source_generator = config->clock_source;
 1e6:	a901      	add	r1, sp, #4
 1e8:	7833      	ldrb	r3, [r6, #0]
 1ea:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
 1ec:	ab06      	add	r3, sp, #24
 1ee:	5ddf      	ldrb	r7, [r3, r7]
 1f0:	0038      	movs	r0, r7
 1f2:	4b64      	ldr	r3, [pc, #400]	; (384 <tc_init+0x234>)
 1f4:	4798      	blx	r3
	system_gclk_chan_enable(inst_gclk_id[instance]);
 1f6:	0038      	movs	r0, r7
 1f8:	4b63      	ldr	r3, [pc, #396]	; (388 <tc_init+0x238>)
 1fa:	4798      	blx	r3
	ctrla_tmp =
 1fc:	8931      	ldrh	r1, [r6, #8]
 1fe:	88b3      	ldrh	r3, [r6, #4]
 200:	430b      	orrs	r3, r1
			(uint32_t)config->wave_generation |
 202:	78b1      	ldrb	r1, [r6, #2]
 204:	79b2      	ldrb	r2, [r6, #6]
 206:	4311      	orrs	r1, r2
	ctrla_tmp =
 208:	4319      	orrs	r1, r3
	if (config->run_in_standby) {
 20a:	7873      	ldrb	r3, [r6, #1]
 20c:	2b00      	cmp	r3, #0
 20e:	d002      	beq.n	216 <tc_init+0xc6>
		ctrla_tmp |= TC_CTRLA_RUNSTDBY;
 210:	2380      	movs	r3, #128	; 0x80
 212:	011b      	lsls	r3, r3, #4
 214:	4319      	orrs	r1, r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
 216:	6822      	ldr	r2, [r4, #0]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30) || (SAMR34) || (SAMR35) || (WLR089)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
 218:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
 21a:	b25b      	sxtb	r3, r3
 21c:	2b00      	cmp	r3, #0
 21e:	dbfb      	blt.n	218 <tc_init+0xc8>
	hw->COUNT8.CTRLA.reg = ctrla_tmp;
 220:	8029      	strh	r1, [r5, #0]
	if (config->oneshot) {
 222:	7b71      	ldrb	r1, [r6, #13]
		ctrlbset_tmp = TC_CTRLBSET_ONESHOT;
 224:	1e4b      	subs	r3, r1, #1
 226:	4199      	sbcs	r1, r3
 228:	0089      	lsls	r1, r1, #2
	if (config->count_direction) {
 22a:	7bb3      	ldrb	r3, [r6, #14]
 22c:	2b00      	cmp	r3, #0
 22e:	d001      	beq.n	234 <tc_init+0xe4>
		ctrlbset_tmp |= TC_CTRLBSET_DIR;
 230:	2301      	movs	r3, #1
 232:	4319      	orrs	r1, r3
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
 234:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
 236:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
 238:	b25b      	sxtb	r3, r3
 23a:	2b00      	cmp	r3, #0
 23c:	dbfb      	blt.n	236 <tc_init+0xe6>
	hw->COUNT8.CTRLBCLR.reg = 0xFF;
 23e:	23ff      	movs	r3, #255	; 0xff
 240:	712b      	strb	r3, [r5, #4]
	if (ctrlbset_tmp) {
 242:	2900      	cmp	r1, #0
 244:	d005      	beq.n	252 <tc_init+0x102>
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
 246:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
 248:	7bd3      	ldrb	r3, [r2, #15]
		while (tc_is_syncing(module_inst)) {
 24a:	b25b      	sxtb	r3, r3
 24c:	2b00      	cmp	r3, #0
 24e:	dbfb      	blt.n	248 <tc_init+0xf8>
		hw->COUNT8.CTRLBSET.reg = ctrlbset_tmp;
 250:	7169      	strb	r1, [r5, #5]
	ctrlc_tmp = config->waveform_invert_output;
 252:	7ab1      	ldrb	r1, [r6, #10]
		if (config->enable_capture_on_channel[i] == true) {
 254:	7af3      	ldrb	r3, [r6, #11]
 256:	2b00      	cmp	r3, #0
 258:	d001      	beq.n	25e <tc_init+0x10e>
			ctrlc_tmp |= (TC_CTRLC_CPTEN(1) << i);
 25a:	2310      	movs	r3, #16
 25c:	4319      	orrs	r1, r3
		if (config->enable_capture_on_channel[i] == true) {
 25e:	7b33      	ldrb	r3, [r6, #12]
 260:	2b00      	cmp	r3, #0
 262:	d001      	beq.n	268 <tc_init+0x118>
			ctrlc_tmp |= (TC_CTRLC_CPTEN(1) << i);
 264:	2320      	movs	r3, #32
 266:	4319      	orrs	r1, r3
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
 268:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
 26a:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
 26c:	b25b      	sxtb	r3, r3
 26e:	2b00      	cmp	r3, #0
 270:	dbfb      	blt.n	26a <tc_init+0x11a>
	hw->COUNT8.CTRLC.reg = ctrlc_tmp;
 272:	71a9      	strb	r1, [r5, #6]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
 274:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
 276:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
 278:	b25b      	sxtb	r3, r3
 27a:	2b00      	cmp	r3, #0
 27c:	dbfb      	blt.n	276 <tc_init+0x126>
	switch (module_inst->counter_size) {
 27e:	7923      	ldrb	r3, [r4, #4]
 280:	2b04      	cmp	r3, #4
 282:	d03f      	beq.n	304 <tc_init+0x1b4>
 284:	2b08      	cmp	r3, #8
 286:	d05e      	beq.n	346 <tc_init+0x1f6>
	return STATUS_ERR_INVALID_ARG;
 288:	2017      	movs	r0, #23
	switch (module_inst->counter_size) {
 28a:	2b00      	cmp	r3, #0
 28c:	d000      	beq.n	290 <tc_init+0x140>
 28e:	e78b      	b.n	1a8 <tc_init+0x58>
 290:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
 292:	b25b      	sxtb	r3, r3
 294:	2b00      	cmp	r3, #0
 296:	dbfb      	blt.n	290 <tc_init+0x140>
				= config->counter_16_bit.value;
 298:	8d33      	ldrh	r3, [r6, #40]	; 0x28
 29a:	822b      	strh	r3, [r5, #16]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
 29c:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
 29e:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
 2a0:	b25b      	sxtb	r3, r3
 2a2:	2b00      	cmp	r3, #0
 2a4:	dbfb      	blt.n	29e <tc_init+0x14e>
					config->counter_16_bit.compare_capture_channel[0];
 2a6:	8d73      	ldrh	r3, [r6, #42]	; 0x2a
			hw->COUNT16.CC[0].reg =
 2a8:	832b      	strh	r3, [r5, #24]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
 2aa:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
 2ac:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
 2ae:	b25b      	sxtb	r3, r3
 2b0:	2b00      	cmp	r3, #0
 2b2:	dbfb      	blt.n	2ac <tc_init+0x15c>
					config->counter_16_bit.compare_capture_channel[1];
 2b4:	8db3      	ldrh	r3, [r6, #44]	; 0x2c
			hw->COUNT16.CC[1].reg =
 2b6:	836b      	strh	r3, [r5, #26]
			return STATUS_OK;
 2b8:	2000      	movs	r0, #0
 2ba:	e775      	b.n	1a8 <tc_init+0x58>
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
 2bc:	a902      	add	r1, sp, #8
 2be:	2301      	movs	r3, #1
 2c0:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
 2c2:	2200      	movs	r2, #0
 2c4:	70ca      	strb	r2, [r1, #3]
		pin_config.mux_position = config->pwm_channel[0].pin_mux;
 2c6:	7e32      	ldrb	r2, [r6, #24]
 2c8:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
 2ca:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
 2cc:	7d30      	ldrb	r0, [r6, #20]
 2ce:	4b2f      	ldr	r3, [pc, #188]	; (38c <tc_init+0x23c>)
 2d0:	4798      	blx	r3
 2d2:	e779      	b.n	1c8 <tc_init+0x78>
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
 2d4:	a902      	add	r1, sp, #8
 2d6:	2301      	movs	r3, #1
 2d8:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
 2da:	2200      	movs	r2, #0
 2dc:	70ca      	strb	r2, [r1, #3]
		pin_config.mux_position = config->pwm_channel[1].pin_mux;
 2de:	3224      	adds	r2, #36	; 0x24
 2e0:	18b2      	adds	r2, r6, r2
 2e2:	7812      	ldrb	r2, [r2, #0]
 2e4:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
 2e6:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
 2e8:	331f      	adds	r3, #31
 2ea:	18f3      	adds	r3, r6, r3
 2ec:	7818      	ldrb	r0, [r3, #0]
 2ee:	4b27      	ldr	r3, [pc, #156]	; (38c <tc_init+0x23c>)
 2f0:	4798      	blx	r3
 2f2:	e76d      	b.n	1d0 <tc_init+0x80>
 2f4:	6a08      	ldr	r0, [r1, #32]
				inst_pm_apbmask[instance + 1]);
 2f6:	1c7a      	adds	r2, r7, #1
 2f8:	0052      	lsls	r2, r2, #1
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
 2fa:	ab03      	add	r3, sp, #12
 2fc:	5ad3      	ldrh	r3, [r2, r3]
 2fe:	4303      	orrs	r3, r0
 300:	620b      	str	r3, [r1, #32]
 302:	e770      	b.n	1e6 <tc_init+0x96>
 304:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
 306:	b25b      	sxtb	r3, r3
 308:	2b00      	cmp	r3, #0
 30a:	dbfb      	blt.n	304 <tc_init+0x1b4>
					config->counter_8_bit.value;
 30c:	2328      	movs	r3, #40	; 0x28
 30e:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.COUNT.reg =
 310:	742b      	strb	r3, [r5, #16]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
 312:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
 314:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
 316:	b25b      	sxtb	r3, r3
 318:	2b00      	cmp	r3, #0
 31a:	dbfb      	blt.n	314 <tc_init+0x1c4>
					config->counter_8_bit.period;
 31c:	2329      	movs	r3, #41	; 0x29
 31e:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.PER.reg =
 320:	752b      	strb	r3, [r5, #20]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
 322:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
 324:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
 326:	b25b      	sxtb	r3, r3
 328:	2b00      	cmp	r3, #0
 32a:	dbfb      	blt.n	324 <tc_init+0x1d4>
					config->counter_8_bit.compare_capture_channel[0];
 32c:	232a      	movs	r3, #42	; 0x2a
 32e:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.CC[0].reg =
 330:	762b      	strb	r3, [r5, #24]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
 332:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
 334:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
 336:	b25b      	sxtb	r3, r3
 338:	2b00      	cmp	r3, #0
 33a:	dbfb      	blt.n	334 <tc_init+0x1e4>
					config->counter_8_bit.compare_capture_channel[1];
 33c:	232b      	movs	r3, #43	; 0x2b
 33e:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.CC[1].reg =
 340:	766b      	strb	r3, [r5, #25]
			return STATUS_OK;
 342:	2000      	movs	r0, #0
 344:	e730      	b.n	1a8 <tc_init+0x58>
 346:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
 348:	b25b      	sxtb	r3, r3
 34a:	2b00      	cmp	r3, #0
 34c:	dbfb      	blt.n	346 <tc_init+0x1f6>
				= config->counter_32_bit.value;
 34e:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 350:	612b      	str	r3, [r5, #16]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
 352:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
 354:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
 356:	b25b      	sxtb	r3, r3
 358:	2b00      	cmp	r3, #0
 35a:	dbfb      	blt.n	354 <tc_init+0x204>
			hw->COUNT32.CC[0].reg =
 35c:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 35e:	61ab      	str	r3, [r5, #24]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
 360:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
 362:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
 364:	b25b      	sxtb	r3, r3
 366:	2b00      	cmp	r3, #0
 368:	dbfb      	blt.n	362 <tc_init+0x212>
					config->counter_32_bit.compare_capture_channel[1];
 36a:	6b33      	ldr	r3, [r6, #48]	; 0x30
			hw->COUNT32.CC[1].reg =
 36c:	61eb      	str	r3, [r5, #28]
			return STATUS_OK;
 36e:	2000      	movs	r0, #0
 370:	e71a      	b.n	1a8 <tc_init+0x58>
 372:	46c0      	nop			; (mov r8, r8)
 374:	00000115 	.word	0x00000115
 378:	00000c44 	.word	0x00000c44
 37c:	20000044 	.word	0x20000044
 380:	40000400 	.word	0x40000400
 384:	0000086d 	.word	0x0000086d
 388:	000007e1 	.word	0x000007e1
 38c:	00000931 	.word	0x00000931

00000390 <tc_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
 390:	1c93      	adds	r3, r2, #2
 392:	009b      	lsls	r3, r3, #2
 394:	5019      	str	r1, [r3, r0]

	/* Set the bit corresponding to the callback_type */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
 396:	2a02      	cmp	r2, #2
 398:	d009      	beq.n	3ae <tc_register_callback+0x1e>
		module->register_callback_mask |= TC_INTFLAG_MC(1);
	}
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
 39a:	2a03      	cmp	r2, #3
 39c:	d00c      	beq.n	3b8 <tc_register_callback+0x28>
		module->register_callback_mask |= TC_INTFLAG_MC(2);
	}
	else {
		module->register_callback_mask |= (1 << callback_type);
 39e:	2301      	movs	r3, #1
 3a0:	4093      	lsls	r3, r2
 3a2:	001a      	movs	r2, r3
 3a4:	7e03      	ldrb	r3, [r0, #24]
 3a6:	4313      	orrs	r3, r2
 3a8:	7603      	strb	r3, [r0, #24]
	}
	return STATUS_OK;
}
 3aa:	2000      	movs	r0, #0
 3ac:	4770      	bx	lr
		module->register_callback_mask |= TC_INTFLAG_MC(1);
 3ae:	7e03      	ldrb	r3, [r0, #24]
 3b0:	2210      	movs	r2, #16
 3b2:	4313      	orrs	r3, r2
 3b4:	7603      	strb	r3, [r0, #24]
 3b6:	e7f8      	b.n	3aa <tc_register_callback+0x1a>
		module->register_callback_mask |= TC_INTFLAG_MC(2);
 3b8:	7e03      	ldrb	r3, [r0, #24]
 3ba:	2220      	movs	r2, #32
 3bc:	4313      	orrs	r3, r2
 3be:	7603      	strb	r3, [r0, #24]
 3c0:	e7f3      	b.n	3aa <tc_register_callback+0x1a>
	...

000003c4 <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
 3c4:	b570      	push	{r4, r5, r6, lr}
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
 3c6:	0080      	lsls	r0, r0, #2
 3c8:	4b16      	ldr	r3, [pc, #88]	; (424 <_tc_interrupt_handler+0x60>)
 3ca:	58c4      	ldr	r4, [r0, r3]
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
 3cc:	6823      	ldr	r3, [r4, #0]
 3ce:	7b9d      	ldrb	r5, [r3, #14]
 3d0:	7e22      	ldrb	r2, [r4, #24]
 3d2:	7e63      	ldrb	r3, [r4, #25]
 3d4:	4013      	ands	r3, r2
 3d6:	401d      	ands	r5, r3
			module->register_callback_mask &
			module->enable_callback_mask;

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
 3d8:	07eb      	lsls	r3, r5, #31
 3da:	d406      	bmi.n	3ea <_tc_interrupt_handler+0x26>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
 3dc:	07ab      	lsls	r3, r5, #30
 3de:	d40b      	bmi.n	3f8 <_tc_interrupt_handler+0x34>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
 3e0:	06eb      	lsls	r3, r5, #27
 3e2:	d410      	bmi.n	406 <_tc_interrupt_handler+0x42>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
 3e4:	06ab      	lsls	r3, r5, #26
 3e6:	d415      	bmi.n	414 <_tc_interrupt_handler+0x50>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
	}
}
 3e8:	bd70      	pop	{r4, r5, r6, pc}
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
 3ea:	0020      	movs	r0, r4
 3ec:	68a3      	ldr	r3, [r4, #8]
 3ee:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
 3f0:	2301      	movs	r3, #1
 3f2:	6822      	ldr	r2, [r4, #0]
 3f4:	7393      	strb	r3, [r2, #14]
 3f6:	e7f1      	b.n	3dc <_tc_interrupt_handler+0x18>
		(module->callback[TC_CALLBACK_ERROR])(module);
 3f8:	0020      	movs	r0, r4
 3fa:	68e3      	ldr	r3, [r4, #12]
 3fc:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
 3fe:	2302      	movs	r3, #2
 400:	6822      	ldr	r2, [r4, #0]
 402:	7393      	strb	r3, [r2, #14]
 404:	e7ec      	b.n	3e0 <_tc_interrupt_handler+0x1c>
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
 406:	0020      	movs	r0, r4
 408:	6923      	ldr	r3, [r4, #16]
 40a:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
 40c:	2310      	movs	r3, #16
 40e:	6822      	ldr	r2, [r4, #0]
 410:	7393      	strb	r3, [r2, #14]
 412:	e7e7      	b.n	3e4 <_tc_interrupt_handler+0x20>
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
 414:	0020      	movs	r0, r4
 416:	6963      	ldr	r3, [r4, #20]
 418:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
 41a:	6823      	ldr	r3, [r4, #0]
 41c:	2220      	movs	r2, #32
 41e:	739a      	strb	r2, [r3, #14]
}
 420:	e7e2      	b.n	3e8 <_tc_interrupt_handler+0x24>
 422:	46c0      	nop			; (mov r8, r8)
 424:	20000044 	.word	0x20000044

00000428 <TC3_Handler>:
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
 428:	b510      	push	{r4, lr}
 42a:	2000      	movs	r0, #0
 42c:	4b01      	ldr	r3, [pc, #4]	; (434 <TC3_Handler+0xc>)
 42e:	4798      	blx	r3
 430:	bd10      	pop	{r4, pc}
 432:	46c0      	nop			; (mov r8, r8)
 434:	000003c5 	.word	0x000003c5

00000438 <TC4_Handler>:
 438:	b510      	push	{r4, lr}
 43a:	2001      	movs	r0, #1
 43c:	4b01      	ldr	r3, [pc, #4]	; (444 <TC4_Handler+0xc>)
 43e:	4798      	blx	r3
 440:	bd10      	pop	{r4, pc}
 442:	46c0      	nop			; (mov r8, r8)
 444:	000003c5 	.word	0x000003c5

00000448 <TC5_Handler>:
 448:	b510      	push	{r4, lr}
 44a:	2002      	movs	r0, #2
 44c:	4b01      	ldr	r3, [pc, #4]	; (454 <TC5_Handler+0xc>)
 44e:	4798      	blx	r3
 450:	bd10      	pop	{r4, pc}
 452:	46c0      	nop			; (mov r8, r8)
 454:	000003c5 	.word	0x000003c5

00000458 <TC6_Handler>:
 458:	b510      	push	{r4, lr}
 45a:	2003      	movs	r0, #3
 45c:	4b01      	ldr	r3, [pc, #4]	; (464 <TC6_Handler+0xc>)
 45e:	4798      	blx	r3
 460:	bd10      	pop	{r4, pc}
 462:	46c0      	nop			; (mov r8, r8)
 464:	000003c5 	.word	0x000003c5

00000468 <TC7_Handler>:
 468:	b510      	push	{r4, lr}
 46a:	2004      	movs	r0, #4
 46c:	4b01      	ldr	r3, [pc, #4]	; (474 <TC7_Handler+0xc>)
 46e:	4798      	blx	r3
 470:	bd10      	pop	{r4, pc}
 472:	46c0      	nop			; (mov r8, r8)
 474:	000003c5 	.word	0x000003c5

00000478 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
 478:	4b0c      	ldr	r3, [pc, #48]	; (4ac <cpu_irq_enter_critical+0x34>)
 47a:	681b      	ldr	r3, [r3, #0]
 47c:	2b00      	cmp	r3, #0
 47e:	d106      	bne.n	48e <cpu_irq_enter_critical+0x16>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 480:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
 484:	2b00      	cmp	r3, #0
 486:	d007      	beq.n	498 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
 488:	2200      	movs	r2, #0
 48a:	4b09      	ldr	r3, [pc, #36]	; (4b0 <cpu_irq_enter_critical+0x38>)
 48c:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
 48e:	4a07      	ldr	r2, [pc, #28]	; (4ac <cpu_irq_enter_critical+0x34>)
 490:	6813      	ldr	r3, [r2, #0]
 492:	3301      	adds	r3, #1
 494:	6013      	str	r3, [r2, #0]
}
 496:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
 498:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 49a:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
 49e:	2200      	movs	r2, #0
 4a0:	4b04      	ldr	r3, [pc, #16]	; (4b4 <cpu_irq_enter_critical+0x3c>)
 4a2:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
 4a4:	3201      	adds	r2, #1
 4a6:	4b02      	ldr	r3, [pc, #8]	; (4b0 <cpu_irq_enter_critical+0x38>)
 4a8:	701a      	strb	r2, [r3, #0]
 4aa:	e7f0      	b.n	48e <cpu_irq_enter_critical+0x16>
 4ac:	20000020 	.word	0x20000020
 4b0:	20000024 	.word	0x20000024
 4b4:	20000000 	.word	0x20000000

000004b8 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
 4b8:	4b08      	ldr	r3, [pc, #32]	; (4dc <cpu_irq_leave_critical+0x24>)
 4ba:	681a      	ldr	r2, [r3, #0]
 4bc:	3a01      	subs	r2, #1
 4be:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
 4c0:	681b      	ldr	r3, [r3, #0]
 4c2:	2b00      	cmp	r3, #0
 4c4:	d109      	bne.n	4da <cpu_irq_leave_critical+0x22>
 4c6:	4b06      	ldr	r3, [pc, #24]	; (4e0 <cpu_irq_leave_critical+0x28>)
 4c8:	781b      	ldrb	r3, [r3, #0]
 4ca:	2b00      	cmp	r3, #0
 4cc:	d005      	beq.n	4da <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
 4ce:	2201      	movs	r2, #1
 4d0:	4b04      	ldr	r3, [pc, #16]	; (4e4 <cpu_irq_leave_critical+0x2c>)
 4d2:	701a      	strb	r2, [r3, #0]
 4d4:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
 4d8:	b662      	cpsie	i
	}
}
 4da:	4770      	bx	lr
 4dc:	20000020 	.word	0x20000020
 4e0:	20000024 	.word	0x20000024
 4e4:	20000000 	.word	0x20000000

000004e8 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
 4e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 4ea:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
 4ec:	ac01      	add	r4, sp, #4
 4ee:	2501      	movs	r5, #1
 4f0:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
 4f2:	2700      	movs	r7, #0
 4f4:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
 4f6:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
 4f8:	0021      	movs	r1, r4
 4fa:	203e      	movs	r0, #62	; 0x3e
 4fc:	4e06      	ldr	r6, [pc, #24]	; (518 <system_board_init+0x30>)
 4fe:	47b0      	blx	r6
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
 500:	2280      	movs	r2, #128	; 0x80
 502:	05d2      	lsls	r2, r2, #23
 504:	4b05      	ldr	r3, [pc, #20]	; (51c <system_board_init+0x34>)
 506:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
 508:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
 50a:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
 50c:	0021      	movs	r1, r4
 50e:	200f      	movs	r0, #15
 510:	47b0      	blx	r6
	port_pin_set_output_level(AT86RFX_RST_PIN, true);
	port_pin_set_output_level(AT86RFX_SLP_PIN, true);
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
	port_pin_set_config(AT86RFX_SPI_MISO, &pin_conf);
#endif	
}
 512:	b003      	add	sp, #12
 514:	bdf0      	pop	{r4, r5, r6, r7, pc}
 516:	46c0      	nop			; (mov r8, r8)
 518:	00000521 	.word	0x00000521
 51c:	41004480 	.word	0x41004480

00000520 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
 520:	b500      	push	{lr}
 522:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
 524:	ab01      	add	r3, sp, #4
 526:	2280      	movs	r2, #128	; 0x80
 528:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
 52a:	780a      	ldrb	r2, [r1, #0]
 52c:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
 52e:	784a      	ldrb	r2, [r1, #1]
 530:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
 532:	788a      	ldrb	r2, [r1, #2]
 534:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
 536:	0019      	movs	r1, r3
 538:	4b01      	ldr	r3, [pc, #4]	; (540 <port_pin_set_config+0x20>)
 53a:	4798      	blx	r3
}
 53c:	b003      	add	sp, #12
 53e:	bd00      	pop	{pc}
 540:	00000931 	.word	0x00000931

00000544 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
 544:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
 546:	490c      	ldr	r1, [pc, #48]	; (578 <system_clock_source_osc8m_set_config+0x34>)
 548:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
 54a:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
 54c:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
 54e:	7840      	ldrb	r0, [r0, #1]
 550:	2201      	movs	r2, #1
 552:	4010      	ands	r0, r2
 554:	0180      	lsls	r0, r0, #6
 556:	2640      	movs	r6, #64	; 0x40
 558:	43b3      	bics	r3, r6
 55a:	4303      	orrs	r3, r0
 55c:	402a      	ands	r2, r5
 55e:	01d2      	lsls	r2, r2, #7
 560:	2080      	movs	r0, #128	; 0x80
 562:	4383      	bics	r3, r0
 564:	4313      	orrs	r3, r2
 566:	2203      	movs	r2, #3
 568:	4022      	ands	r2, r4
 56a:	0212      	lsls	r2, r2, #8
 56c:	4803      	ldr	r0, [pc, #12]	; (57c <system_clock_source_osc8m_set_config+0x38>)
 56e:	4003      	ands	r3, r0
 570:	4313      	orrs	r3, r2
 572:	620b      	str	r3, [r1, #32]
}
 574:	bd70      	pop	{r4, r5, r6, pc}
 576:	46c0      	nop			; (mov r8, r8)
 578:	40000800 	.word	0x40000800
 57c:	fffffcff 	.word	0xfffffcff

00000580 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
 580:	2808      	cmp	r0, #8
 582:	d803      	bhi.n	58c <system_clock_source_enable+0xc>
 584:	0080      	lsls	r0, r0, #2
 586:	4b25      	ldr	r3, [pc, #148]	; (61c <system_clock_source_enable+0x9c>)
 588:	581b      	ldr	r3, [r3, r0]
 58a:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
 58c:	2017      	movs	r0, #23
 58e:	e044      	b.n	61a <system_clock_source_enable+0x9a>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
 590:	4a23      	ldr	r2, [pc, #140]	; (620 <system_clock_source_enable+0xa0>)
 592:	6a13      	ldr	r3, [r2, #32]
 594:	2102      	movs	r1, #2
 596:	430b      	orrs	r3, r1
 598:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
 59a:	2000      	movs	r0, #0
 59c:	e03d      	b.n	61a <system_clock_source_enable+0x9a>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
 59e:	4a20      	ldr	r2, [pc, #128]	; (620 <system_clock_source_enable+0xa0>)
 5a0:	6993      	ldr	r3, [r2, #24]
 5a2:	2102      	movs	r1, #2
 5a4:	430b      	orrs	r3, r1
 5a6:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
 5a8:	2000      	movs	r0, #0
		break;
 5aa:	e036      	b.n	61a <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
 5ac:	4a1c      	ldr	r2, [pc, #112]	; (620 <system_clock_source_enable+0xa0>)
 5ae:	8a13      	ldrh	r3, [r2, #16]
 5b0:	2102      	movs	r1, #2
 5b2:	430b      	orrs	r3, r1
 5b4:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
 5b6:	2000      	movs	r0, #0
		break;
 5b8:	e02f      	b.n	61a <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
 5ba:	4a19      	ldr	r2, [pc, #100]	; (620 <system_clock_source_enable+0xa0>)
 5bc:	8a93      	ldrh	r3, [r2, #20]
 5be:	2102      	movs	r1, #2
 5c0:	430b      	orrs	r3, r1
 5c2:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
 5c4:	2000      	movs	r0, #0
		break;
 5c6:	e028      	b.n	61a <system_clock_source_enable+0x9a>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
 5c8:	4916      	ldr	r1, [pc, #88]	; (624 <system_clock_source_enable+0xa4>)
 5ca:	680b      	ldr	r3, [r1, #0]
 5cc:	2202      	movs	r2, #2
 5ce:	4313      	orrs	r3, r2
 5d0:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
 5d2:	4b13      	ldr	r3, [pc, #76]	; (620 <system_clock_source_enable+0xa0>)
 5d4:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
 5d6:	0019      	movs	r1, r3
 5d8:	320e      	adds	r2, #14
 5da:	68cb      	ldr	r3, [r1, #12]
 5dc:	421a      	tst	r2, r3
 5de:	d0fc      	beq.n	5da <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
 5e0:	4a10      	ldr	r2, [pc, #64]	; (624 <system_clock_source_enable+0xa4>)
 5e2:	6891      	ldr	r1, [r2, #8]
 5e4:	4b0e      	ldr	r3, [pc, #56]	; (620 <system_clock_source_enable+0xa0>)
 5e6:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
 5e8:	6852      	ldr	r2, [r2, #4]
 5ea:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
 5ec:	2200      	movs	r2, #0
 5ee:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
 5f0:	0019      	movs	r1, r3
 5f2:	3210      	adds	r2, #16
 5f4:	68cb      	ldr	r3, [r1, #12]
 5f6:	421a      	tst	r2, r3
 5f8:	d0fc      	beq.n	5f4 <system_clock_source_enable+0x74>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
 5fa:	4b0a      	ldr	r3, [pc, #40]	; (624 <system_clock_source_enable+0xa4>)
 5fc:	681b      	ldr	r3, [r3, #0]
 5fe:	b29b      	uxth	r3, r3
 600:	4a07      	ldr	r2, [pc, #28]	; (620 <system_clock_source_enable+0xa0>)
 602:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
 604:	2000      	movs	r0, #0
 606:	e008      	b.n	61a <system_clock_source_enable+0x9a>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
 608:	4905      	ldr	r1, [pc, #20]	; (620 <system_clock_source_enable+0xa0>)
 60a:	2244      	movs	r2, #68	; 0x44
 60c:	5c8b      	ldrb	r3, [r1, r2]
 60e:	2002      	movs	r0, #2
 610:	4303      	orrs	r3, r0
 612:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
 614:	2000      	movs	r0, #0
		break;
 616:	e000      	b.n	61a <system_clock_source_enable+0x9a>
		return STATUS_OK;
 618:	2000      	movs	r0, #0
}
 61a:	4770      	bx	lr
 61c:	00000c64 	.word	0x00000c64
 620:	40000800 	.word	0x40000800
 624:	20000028 	.word	0x20000028

00000628 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
 628:	b530      	push	{r4, r5, lr}
 62a:	b085      	sub	sp, #20
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
 62c:	22c2      	movs	r2, #194	; 0xc2
 62e:	00d2      	lsls	r2, r2, #3
 630:	4b1a      	ldr	r3, [pc, #104]	; (69c <system_clock_init+0x74>)
 632:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
 634:	4a1a      	ldr	r2, [pc, #104]	; (6a0 <system_clock_init+0x78>)
 636:	6853      	ldr	r3, [r2, #4]
 638:	211e      	movs	r1, #30
 63a:	438b      	bics	r3, r1
 63c:	6053      	str	r3, [r2, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_1;
 63e:	2301      	movs	r3, #1
 640:	466a      	mov	r2, sp
 642:	7013      	strb	r3, [r2, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
 644:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
 646:	4d17      	ldr	r5, [pc, #92]	; (6a4 <system_clock_init+0x7c>)
 648:	b2e0      	uxtb	r0, r4
 64a:	4669      	mov	r1, sp
 64c:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
 64e:	3401      	adds	r4, #1
 650:	2c25      	cmp	r4, #37	; 0x25
 652:	d1f9      	bne.n	648 <system_clock_init+0x20>
	config->run_in_standby  = false;
 654:	a803      	add	r0, sp, #12
 656:	2400      	movs	r4, #0
 658:	7044      	strb	r4, [r0, #1]
	config->on_demand       = true;
 65a:	2501      	movs	r5, #1
 65c:	7085      	strb	r5, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
 65e:	7004      	strb	r4, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
 660:	4b11      	ldr	r3, [pc, #68]	; (6a8 <system_clock_init+0x80>)
 662:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
 664:	2006      	movs	r0, #6
 666:	4b11      	ldr	r3, [pc, #68]	; (6ac <system_clock_init+0x84>)
 668:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
 66a:	4b11      	ldr	r3, [pc, #68]	; (6b0 <system_clock_init+0x88>)
 66c:	4798      	blx	r3
	PM->CPUSEL.reg = (uint32_t)divider;
 66e:	4b11      	ldr	r3, [pc, #68]	; (6b4 <system_clock_init+0x8c>)
 670:	721c      	strb	r4, [r3, #8]
			PM->APBASEL.reg = (uint32_t)divider;
 672:	725c      	strb	r4, [r3, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
 674:	729c      	strb	r4, [r3, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
 676:	72dc      	strb	r4, [r3, #11]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
 678:	9501      	str	r5, [sp, #4]
	config->high_when_disabled = false;
 67a:	466b      	mov	r3, sp
 67c:	705c      	strb	r4, [r3, #1]
#if SAML21 || SAML22  || SAMR30 || SAMR34 || SAMR35 || (WLR089)
	config->source_clock       = GCLK_SOURCE_OSC16M;
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
 67e:	2306      	movs	r3, #6
 680:	466a      	mov	r2, sp
 682:	7013      	strb	r3, [r2, #0]
#endif
	config->run_in_standby     = false;
 684:	7214      	strb	r4, [r2, #8]
	config->output_enable      = false;
 686:	7254      	strb	r4, [r2, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
 688:	4669      	mov	r1, sp
 68a:	2000      	movs	r0, #0
 68c:	4b0a      	ldr	r3, [pc, #40]	; (6b8 <system_clock_init+0x90>)
 68e:	4798      	blx	r3
 690:	2000      	movs	r0, #0
 692:	4b0a      	ldr	r3, [pc, #40]	; (6bc <system_clock_init+0x94>)
 694:	4798      	blx	r3
#endif
}
 696:	b005      	add	sp, #20
 698:	bd30      	pop	{r4, r5, pc}
 69a:	46c0      	nop			; (mov r8, r8)
 69c:	40000800 	.word	0x40000800
 6a0:	41004000 	.word	0x41004000
 6a4:	0000086d 	.word	0x0000086d
 6a8:	00000545 	.word	0x00000545
 6ac:	00000581 	.word	0x00000581
 6b0:	000006c1 	.word	0x000006c1
 6b4:	40000400 	.word	0x40000400
 6b8:	000006e5 	.word	0x000006e5
 6bc:	0000079d 	.word	0x0000079d

000006c0 <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
 6c0:	4a06      	ldr	r2, [pc, #24]	; (6dc <system_gclk_init+0x1c>)
 6c2:	6993      	ldr	r3, [r2, #24]
 6c4:	2108      	movs	r1, #8
 6c6:	430b      	orrs	r3, r1
 6c8:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
 6ca:	2201      	movs	r2, #1
 6cc:	4b04      	ldr	r3, [pc, #16]	; (6e0 <system_gclk_init+0x20>)
 6ce:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
 6d0:	0019      	movs	r1, r3
 6d2:	780b      	ldrb	r3, [r1, #0]
 6d4:	4213      	tst	r3, r2
 6d6:	d1fc      	bne.n	6d2 <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
 6d8:	4770      	bx	lr
 6da:	46c0      	nop			; (mov r8, r8)
 6dc:	40000400 	.word	0x40000400
 6e0:	40000c00 	.word	0x40000c00

000006e4 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
 6e4:	b570      	push	{r4, r5, r6, lr}
 6e6:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
 6e8:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
 6ea:	780d      	ldrb	r5, [r1, #0]
 6ec:	022d      	lsls	r5, r5, #8
 6ee:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
 6f0:	784b      	ldrb	r3, [r1, #1]
 6f2:	2b00      	cmp	r3, #0
 6f4:	d002      	beq.n	6fc <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
 6f6:	2380      	movs	r3, #128	; 0x80
 6f8:	02db      	lsls	r3, r3, #11
 6fa:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
 6fc:	7a4b      	ldrb	r3, [r1, #9]
 6fe:	2b00      	cmp	r3, #0
 700:	d002      	beq.n	708 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
 702:	2380      	movs	r3, #128	; 0x80
 704:	031b      	lsls	r3, r3, #12
 706:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
 708:	6848      	ldr	r0, [r1, #4]
 70a:	2801      	cmp	r0, #1
 70c:	d910      	bls.n	730 <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
 70e:	1e43      	subs	r3, r0, #1
 710:	4218      	tst	r0, r3
 712:	d134      	bne.n	77e <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
 714:	2802      	cmp	r0, #2
 716:	d930      	bls.n	77a <system_gclk_gen_set_config+0x96>
 718:	2302      	movs	r3, #2
 71a:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
 71c:	3201      	adds	r2, #1
						mask <<= 1) {
 71e:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
 720:	4298      	cmp	r0, r3
 722:	d8fb      	bhi.n	71c <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
 724:	0212      	lsls	r2, r2, #8
 726:	4332      	orrs	r2, r6
 728:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
 72a:	2380      	movs	r3, #128	; 0x80
 72c:	035b      	lsls	r3, r3, #13
 72e:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
 730:	7a0b      	ldrb	r3, [r1, #8]
 732:	2b00      	cmp	r3, #0
 734:	d002      	beq.n	73c <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
 736:	2380      	movs	r3, #128	; 0x80
 738:	039b      	lsls	r3, r3, #14
 73a:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
 73c:	4a13      	ldr	r2, [pc, #76]	; (78c <system_gclk_gen_set_config+0xa8>)
 73e:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
 740:	b25b      	sxtb	r3, r3
 742:	2b00      	cmp	r3, #0
 744:	dbfb      	blt.n	73e <system_gclk_gen_set_config+0x5a>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
 746:	4b12      	ldr	r3, [pc, #72]	; (790 <system_gclk_gen_set_config+0xac>)
 748:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
 74a:	4b12      	ldr	r3, [pc, #72]	; (794 <system_gclk_gen_set_config+0xb0>)
 74c:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
 74e:	4a0f      	ldr	r2, [pc, #60]	; (78c <system_gclk_gen_set_config+0xa8>)
 750:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
 752:	b25b      	sxtb	r3, r3
 754:	2b00      	cmp	r3, #0
 756:	dbfb      	blt.n	750 <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
 758:	4b0c      	ldr	r3, [pc, #48]	; (78c <system_gclk_gen_set_config+0xa8>)
 75a:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
 75c:	001a      	movs	r2, r3
 75e:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
 760:	b25b      	sxtb	r3, r3
 762:	2b00      	cmp	r3, #0
 764:	dbfb      	blt.n	75e <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
 766:	4a09      	ldr	r2, [pc, #36]	; (78c <system_gclk_gen_set_config+0xa8>)
 768:	6853      	ldr	r3, [r2, #4]
 76a:	2180      	movs	r1, #128	; 0x80
 76c:	0249      	lsls	r1, r1, #9
 76e:	400b      	ands	r3, r1
 770:	431d      	orrs	r5, r3
 772:	6055      	str	r5, [r2, #4]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
 774:	4b08      	ldr	r3, [pc, #32]	; (798 <system_gclk_gen_set_config+0xb4>)
 776:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
 778:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
 77a:	2200      	movs	r2, #0
 77c:	e7d2      	b.n	724 <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
 77e:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
 780:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
 782:	2380      	movs	r3, #128	; 0x80
 784:	029b      	lsls	r3, r3, #10
 786:	431d      	orrs	r5, r3
 788:	e7d2      	b.n	730 <system_gclk_gen_set_config+0x4c>
 78a:	46c0      	nop			; (mov r8, r8)
 78c:	40000c00 	.word	0x40000c00
 790:	00000479 	.word	0x00000479
 794:	40000c08 	.word	0x40000c08
 798:	000004b9 	.word	0x000004b9

0000079c <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
 79c:	b510      	push	{r4, lr}
 79e:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
 7a0:	4a0b      	ldr	r2, [pc, #44]	; (7d0 <system_gclk_gen_enable+0x34>)
 7a2:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
 7a4:	b25b      	sxtb	r3, r3
 7a6:	2b00      	cmp	r3, #0
 7a8:	dbfb      	blt.n	7a2 <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
 7aa:	4b0a      	ldr	r3, [pc, #40]	; (7d4 <system_gclk_gen_enable+0x38>)
 7ac:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
 7ae:	4b0a      	ldr	r3, [pc, #40]	; (7d8 <system_gclk_gen_enable+0x3c>)
 7b0:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
 7b2:	4a07      	ldr	r2, [pc, #28]	; (7d0 <system_gclk_gen_enable+0x34>)
 7b4:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
 7b6:	b25b      	sxtb	r3, r3
 7b8:	2b00      	cmp	r3, #0
 7ba:	dbfb      	blt.n	7b4 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
 7bc:	4a04      	ldr	r2, [pc, #16]	; (7d0 <system_gclk_gen_enable+0x34>)
 7be:	6851      	ldr	r1, [r2, #4]
 7c0:	2380      	movs	r3, #128	; 0x80
 7c2:	025b      	lsls	r3, r3, #9
 7c4:	430b      	orrs	r3, r1
 7c6:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
 7c8:	4b04      	ldr	r3, [pc, #16]	; (7dc <system_gclk_gen_enable+0x40>)
 7ca:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
 7cc:	bd10      	pop	{r4, pc}
 7ce:	46c0      	nop			; (mov r8, r8)
 7d0:	40000c00 	.word	0x40000c00
 7d4:	00000479 	.word	0x00000479
 7d8:	40000c04 	.word	0x40000c04
 7dc:	000004b9 	.word	0x000004b9

000007e0 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
 7e0:	b510      	push	{r4, lr}
 7e2:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
 7e4:	4b06      	ldr	r3, [pc, #24]	; (800 <system_gclk_chan_enable+0x20>)
 7e6:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
 7e8:	4b06      	ldr	r3, [pc, #24]	; (804 <system_gclk_chan_enable+0x24>)
 7ea:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
 7ec:	4a06      	ldr	r2, [pc, #24]	; (808 <system_gclk_chan_enable+0x28>)
 7ee:	8853      	ldrh	r3, [r2, #2]
 7f0:	2180      	movs	r1, #128	; 0x80
 7f2:	01c9      	lsls	r1, r1, #7
 7f4:	430b      	orrs	r3, r1
 7f6:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
 7f8:	4b04      	ldr	r3, [pc, #16]	; (80c <system_gclk_chan_enable+0x2c>)
 7fa:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
 7fc:	bd10      	pop	{r4, pc}
 7fe:	46c0      	nop			; (mov r8, r8)
 800:	00000479 	.word	0x00000479
 804:	40000c02 	.word	0x40000c02
 808:	40000c00 	.word	0x40000c00
 80c:	000004b9 	.word	0x000004b9

00000810 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
 810:	b510      	push	{r4, lr}
 812:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
 814:	4b0f      	ldr	r3, [pc, #60]	; (854 <system_gclk_chan_disable+0x44>)
 816:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
 818:	4b0f      	ldr	r3, [pc, #60]	; (858 <system_gclk_chan_disable+0x48>)
 81a:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
 81c:	4a0f      	ldr	r2, [pc, #60]	; (85c <system_gclk_chan_disable+0x4c>)
 81e:	8853      	ldrh	r3, [r2, #2]
 820:	051b      	lsls	r3, r3, #20
 822:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
 824:	8853      	ldrh	r3, [r2, #2]
 826:	490e      	ldr	r1, [pc, #56]	; (860 <system_gclk_chan_disable+0x50>)
 828:	400b      	ands	r3, r1
 82a:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
 82c:	8853      	ldrh	r3, [r2, #2]
 82e:	490d      	ldr	r1, [pc, #52]	; (864 <system_gclk_chan_disable+0x54>)
 830:	400b      	ands	r3, r1
 832:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
 834:	0011      	movs	r1, r2
 836:	2280      	movs	r2, #128	; 0x80
 838:	01d2      	lsls	r2, r2, #7
 83a:	884b      	ldrh	r3, [r1, #2]
 83c:	4213      	tst	r3, r2
 83e:	d1fc      	bne.n	83a <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
 840:	4906      	ldr	r1, [pc, #24]	; (85c <system_gclk_chan_disable+0x4c>)
 842:	884a      	ldrh	r2, [r1, #2]
 844:	0203      	lsls	r3, r0, #8
 846:	4806      	ldr	r0, [pc, #24]	; (860 <system_gclk_chan_disable+0x50>)
 848:	4002      	ands	r2, r0
 84a:	4313      	orrs	r3, r2
 84c:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
 84e:	4b06      	ldr	r3, [pc, #24]	; (868 <system_gclk_chan_disable+0x58>)
 850:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
 852:	bd10      	pop	{r4, pc}
 854:	00000479 	.word	0x00000479
 858:	40000c02 	.word	0x40000c02
 85c:	40000c00 	.word	0x40000c00
 860:	fffff0ff 	.word	0xfffff0ff
 864:	ffffbfff 	.word	0xffffbfff
 868:	000004b9 	.word	0x000004b9

0000086c <system_gclk_chan_set_config>:
{
 86c:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
 86e:	780c      	ldrb	r4, [r1, #0]
 870:	0224      	lsls	r4, r4, #8
 872:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
 874:	4b02      	ldr	r3, [pc, #8]	; (880 <system_gclk_chan_set_config+0x14>)
 876:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
 878:	b2a4      	uxth	r4, r4
 87a:	4b02      	ldr	r3, [pc, #8]	; (884 <system_gclk_chan_set_config+0x18>)
 87c:	805c      	strh	r4, [r3, #2]
}
 87e:	bd10      	pop	{r4, pc}
 880:	00000811 	.word	0x00000811
 884:	40000c00 	.word	0x40000c00

00000888 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
 888:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
 88a:	78d3      	ldrb	r3, [r2, #3]
 88c:	2b00      	cmp	r3, #0
 88e:	d135      	bne.n	8fc <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
 890:	7813      	ldrb	r3, [r2, #0]
 892:	2b80      	cmp	r3, #128	; 0x80
 894:	d029      	beq.n	8ea <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
 896:	061b      	lsls	r3, r3, #24
 898:	2480      	movs	r4, #128	; 0x80
 89a:	0264      	lsls	r4, r4, #9
 89c:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
 89e:	7854      	ldrb	r4, [r2, #1]
 8a0:	2502      	movs	r5, #2
 8a2:	43ac      	bics	r4, r5
 8a4:	d106      	bne.n	8b4 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
 8a6:	7894      	ldrb	r4, [r2, #2]
 8a8:	2c00      	cmp	r4, #0
 8aa:	d120      	bne.n	8ee <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
 8ac:	2480      	movs	r4, #128	; 0x80
 8ae:	02a4      	lsls	r4, r4, #10
 8b0:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
 8b2:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
 8b4:	7854      	ldrb	r4, [r2, #1]
 8b6:	3c01      	subs	r4, #1
 8b8:	2c01      	cmp	r4, #1
 8ba:	d91c      	bls.n	8f6 <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
 8bc:	040d      	lsls	r5, r1, #16
 8be:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
 8c0:	24a0      	movs	r4, #160	; 0xa0
 8c2:	05e4      	lsls	r4, r4, #23
 8c4:	432c      	orrs	r4, r5
 8c6:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
 8c8:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
 8ca:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
 8cc:	24d0      	movs	r4, #208	; 0xd0
 8ce:	0624      	lsls	r4, r4, #24
 8d0:	432c      	orrs	r4, r5
 8d2:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
 8d4:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
 8d6:	78d4      	ldrb	r4, [r2, #3]
 8d8:	2c00      	cmp	r4, #0
 8da:	d122      	bne.n	922 <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
 8dc:	035b      	lsls	r3, r3, #13
 8de:	d51c      	bpl.n	91a <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
 8e0:	7893      	ldrb	r3, [r2, #2]
 8e2:	2b01      	cmp	r3, #1
 8e4:	d01e      	beq.n	924 <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
 8e6:	6141      	str	r1, [r0, #20]
 8e8:	e017      	b.n	91a <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
 8ea:	2300      	movs	r3, #0
 8ec:	e7d7      	b.n	89e <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
 8ee:	24c0      	movs	r4, #192	; 0xc0
 8f0:	02e4      	lsls	r4, r4, #11
 8f2:	4323      	orrs	r3, r4
 8f4:	e7dd      	b.n	8b2 <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
 8f6:	4c0d      	ldr	r4, [pc, #52]	; (92c <_system_pinmux_config+0xa4>)
 8f8:	4023      	ands	r3, r4
 8fa:	e7df      	b.n	8bc <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
 8fc:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
 8fe:	040c      	lsls	r4, r1, #16
 900:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
 902:	23a0      	movs	r3, #160	; 0xa0
 904:	05db      	lsls	r3, r3, #23
 906:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
 908:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
 90a:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
 90c:	23d0      	movs	r3, #208	; 0xd0
 90e:	061b      	lsls	r3, r3, #24
 910:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
 912:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
 914:	78d3      	ldrb	r3, [r2, #3]
 916:	2b00      	cmp	r3, #0
 918:	d103      	bne.n	922 <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
 91a:	7853      	ldrb	r3, [r2, #1]
 91c:	3b01      	subs	r3, #1
 91e:	2b01      	cmp	r3, #1
 920:	d902      	bls.n	928 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
 922:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
 924:	6181      	str	r1, [r0, #24]
 926:	e7f8      	b.n	91a <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
 928:	6081      	str	r1, [r0, #8]
}
 92a:	e7fa      	b.n	922 <_system_pinmux_config+0x9a>
 92c:	fffbffff 	.word	0xfffbffff

00000930 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
 930:	b510      	push	{r4, lr}
 932:	000a      	movs	r2, r1
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
 934:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
 936:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
 938:	2900      	cmp	r1, #0
 93a:	d104      	bne.n	946 <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
 93c:	0943      	lsrs	r3, r0, #5
 93e:	01db      	lsls	r3, r3, #7
 940:	4905      	ldr	r1, [pc, #20]	; (958 <system_pinmux_pin_set_config+0x28>)
 942:	468c      	mov	ip, r1
 944:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
 946:	241f      	movs	r4, #31
 948:	4020      	ands	r0, r4
 94a:	2101      	movs	r1, #1
 94c:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
 94e:	0018      	movs	r0, r3
 950:	4b02      	ldr	r3, [pc, #8]	; (95c <system_pinmux_pin_set_config+0x2c>)
 952:	4798      	blx	r3
}
 954:	bd10      	pop	{r4, pc}
 956:	46c0      	nop			; (mov r8, r8)
 958:	41004400 	.word	0x41004400
 95c:	00000889 	.word	0x00000889

00000960 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
 960:	4770      	bx	lr
	...

00000964 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
 964:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
 966:	4b05      	ldr	r3, [pc, #20]	; (97c <system_init+0x18>)
 968:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
 96a:	4b05      	ldr	r3, [pc, #20]	; (980 <system_init+0x1c>)
 96c:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
 96e:	4b05      	ldr	r3, [pc, #20]	; (984 <system_init+0x20>)
 970:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
 972:	4b05      	ldr	r3, [pc, #20]	; (988 <system_init+0x24>)
 974:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
 976:	4b05      	ldr	r3, [pc, #20]	; (98c <system_init+0x28>)
 978:	4798      	blx	r3
}
 97a:	bd10      	pop	{r4, pc}
 97c:	00000629 	.word	0x00000629
 980:	000004e9 	.word	0x000004e9
 984:	00000961 	.word	0x00000961
 988:	00000961 	.word	0x00000961
 98c:	00000961 	.word	0x00000961

00000990 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
 990:	e7fe      	b.n	990 <Dummy_Handler>
	...

00000994 <Reset_Handler>:
{
 994:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
 996:	4a2a      	ldr	r2, [pc, #168]	; (a40 <Reset_Handler+0xac>)
 998:	4b2a      	ldr	r3, [pc, #168]	; (a44 <Reset_Handler+0xb0>)
 99a:	429a      	cmp	r2, r3
 99c:	d011      	beq.n	9c2 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
 99e:	001a      	movs	r2, r3
 9a0:	4b29      	ldr	r3, [pc, #164]	; (a48 <Reset_Handler+0xb4>)
 9a2:	429a      	cmp	r2, r3
 9a4:	d20d      	bcs.n	9c2 <Reset_Handler+0x2e>
 9a6:	4a29      	ldr	r2, [pc, #164]	; (a4c <Reset_Handler+0xb8>)
 9a8:	3303      	adds	r3, #3
 9aa:	1a9b      	subs	r3, r3, r2
 9ac:	089b      	lsrs	r3, r3, #2
 9ae:	3301      	adds	r3, #1
 9b0:	009b      	lsls	r3, r3, #2
 9b2:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
 9b4:	4823      	ldr	r0, [pc, #140]	; (a44 <Reset_Handler+0xb0>)
 9b6:	4922      	ldr	r1, [pc, #136]	; (a40 <Reset_Handler+0xac>)
 9b8:	588c      	ldr	r4, [r1, r2]
 9ba:	5084      	str	r4, [r0, r2]
 9bc:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
 9be:	429a      	cmp	r2, r3
 9c0:	d1fa      	bne.n	9b8 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
 9c2:	4a23      	ldr	r2, [pc, #140]	; (a50 <Reset_Handler+0xbc>)
 9c4:	4b23      	ldr	r3, [pc, #140]	; (a54 <Reset_Handler+0xc0>)
 9c6:	429a      	cmp	r2, r3
 9c8:	d20a      	bcs.n	9e0 <Reset_Handler+0x4c>
 9ca:	43d3      	mvns	r3, r2
 9cc:	4921      	ldr	r1, [pc, #132]	; (a54 <Reset_Handler+0xc0>)
 9ce:	185b      	adds	r3, r3, r1
 9d0:	2103      	movs	r1, #3
 9d2:	438b      	bics	r3, r1
 9d4:	3304      	adds	r3, #4
 9d6:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
 9d8:	2100      	movs	r1, #0
 9da:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
 9dc:	4293      	cmp	r3, r2
 9de:	d1fc      	bne.n	9da <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
 9e0:	4a1d      	ldr	r2, [pc, #116]	; (a58 <Reset_Handler+0xc4>)
 9e2:	21ff      	movs	r1, #255	; 0xff
 9e4:	4b1d      	ldr	r3, [pc, #116]	; (a5c <Reset_Handler+0xc8>)
 9e6:	438b      	bics	r3, r1
 9e8:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
 9ea:	39fd      	subs	r1, #253	; 0xfd
 9ec:	2390      	movs	r3, #144	; 0x90
 9ee:	005b      	lsls	r3, r3, #1
 9f0:	4a1b      	ldr	r2, [pc, #108]	; (a60 <Reset_Handler+0xcc>)
 9f2:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
 9f4:	4a1b      	ldr	r2, [pc, #108]	; (a64 <Reset_Handler+0xd0>)
 9f6:	78d3      	ldrb	r3, [r2, #3]
 9f8:	2503      	movs	r5, #3
 9fa:	43ab      	bics	r3, r5
 9fc:	2402      	movs	r4, #2
 9fe:	4323      	orrs	r3, r4
 a00:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
 a02:	78d3      	ldrb	r3, [r2, #3]
 a04:	270c      	movs	r7, #12
 a06:	43bb      	bics	r3, r7
 a08:	2608      	movs	r6, #8
 a0a:	4333      	orrs	r3, r6
 a0c:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
 a0e:	4b16      	ldr	r3, [pc, #88]	; (a68 <Reset_Handler+0xd4>)
 a10:	7b98      	ldrb	r0, [r3, #14]
 a12:	2230      	movs	r2, #48	; 0x30
 a14:	4390      	bics	r0, r2
 a16:	2220      	movs	r2, #32
 a18:	4310      	orrs	r0, r2
 a1a:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
 a1c:	7b99      	ldrb	r1, [r3, #14]
 a1e:	43b9      	bics	r1, r7
 a20:	4331      	orrs	r1, r6
 a22:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
 a24:	7b9a      	ldrb	r2, [r3, #14]
 a26:	43aa      	bics	r2, r5
 a28:	4322      	orrs	r2, r4
 a2a:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
 a2c:	4a0f      	ldr	r2, [pc, #60]	; (a6c <Reset_Handler+0xd8>)
 a2e:	6853      	ldr	r3, [r2, #4]
 a30:	2180      	movs	r1, #128	; 0x80
 a32:	430b      	orrs	r3, r1
 a34:	6053      	str	r3, [r2, #4]
        __libc_init_array();
 a36:	4b0e      	ldr	r3, [pc, #56]	; (a70 <Reset_Handler+0xdc>)
 a38:	4798      	blx	r3
        main();
 a3a:	4b0e      	ldr	r3, [pc, #56]	; (a74 <Reset_Handler+0xe0>)
 a3c:	4798      	blx	r3
 a3e:	e7fe      	b.n	a3e <Reset_Handler+0xaa>
 a40:	00000cb0 	.word	0x00000cb0
 a44:	20000000 	.word	0x20000000
 a48:	20000004 	.word	0x20000004
 a4c:	20000004 	.word	0x20000004
 a50:	20000004 	.word	0x20000004
 a54:	20000074 	.word	0x20000074
 a58:	e000ed00 	.word	0xe000ed00
 a5c:	00000000 	.word	0x00000000
 a60:	41007000 	.word	0x41007000
 a64:	41005000 	.word	0x41005000
 a68:	41004800 	.word	0x41004800
 a6c:	41004000 	.word	0x41004000
 a70:	00000bfd 	.word	0x00000bfd
 a74:	00000be1 	.word	0x00000be1

00000a78 <tc_callback_to_toggle_led>:

void tc_callback_to_toggle_led(struct tc_module *const module_inst){

	static uint8_t ButtonReadCount=0;
	
	if(ButtonReadCount==STATE_DEBOUNCING){port_pin_toggle_output_level(LED0_PIN);}
 a78:	4b0e      	ldr	r3, [pc, #56]	; (ab4 <tc_callback_to_toggle_led+0x3c>)
 a7a:	781b      	ldrb	r3, [r3, #0]
 a7c:	2b01      	cmp	r3, #1
 a7e:	d006      	beq.n	a8e <tc_callback_to_toggle_led+0x16>
	return (port_base->IN.reg & pin_mask);
 a80:	4a0d      	ldr	r2, [pc, #52]	; (ab8 <tc_callback_to_toggle_led+0x40>)
 a82:	6a12      	ldr	r2, [r2, #32]

	if(!port_pin_get_input_level(BUTTON_0_PIN)){
 a84:	0412      	lsls	r2, r2, #16
 a86:	d40e      	bmi.n	aa6 <tc_callback_to_toggle_led+0x2e>
		if(ButtonReadCount<STATE_IDLE_HIGH)ButtonReadCount++;
 a88:	2b01      	cmp	r3, #1
 a8a:	d908      	bls.n	a9e <tc_callback_to_toggle_led+0x26>
		if(ButtonReadCount)ButtonReadCount--;
		}
		
	

}
 a8c:	4770      	bx	lr
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Toggle pin output level */
	port_base->OUTTGL.reg = pin_mask;
 a8e:	2180      	movs	r1, #128	; 0x80
 a90:	05c9      	lsls	r1, r1, #23
 a92:	4a0a      	ldr	r2, [pc, #40]	; (abc <tc_callback_to_toggle_led+0x44>)
 a94:	61d1      	str	r1, [r2, #28]
	return (port_base->IN.reg & pin_mask);
 a96:	4a08      	ldr	r2, [pc, #32]	; (ab8 <tc_callback_to_toggle_led+0x40>)
 a98:	6a12      	ldr	r2, [r2, #32]
	if(!port_pin_get_input_level(BUTTON_0_PIN)){
 a9a:	0412      	lsls	r2, r2, #16
 a9c:	d405      	bmi.n	aaa <tc_callback_to_toggle_led+0x32>
		if(ButtonReadCount<STATE_IDLE_HIGH)ButtonReadCount++;
 a9e:	3301      	adds	r3, #1
 aa0:	4a04      	ldr	r2, [pc, #16]	; (ab4 <tc_callback_to_toggle_led+0x3c>)
 aa2:	7013      	strb	r3, [r2, #0]
 aa4:	e7f2      	b.n	a8c <tc_callback_to_toggle_led+0x14>
		if(ButtonReadCount)ButtonReadCount--;
 aa6:	2b00      	cmp	r3, #0
 aa8:	d0f0      	beq.n	a8c <tc_callback_to_toggle_led+0x14>
 aaa:	3b01      	subs	r3, #1
 aac:	4a01      	ldr	r2, [pc, #4]	; (ab4 <tc_callback_to_toggle_led+0x3c>)
 aae:	7013      	strb	r3, [r2, #0]
}
 ab0:	e7ec      	b.n	a8c <tc_callback_to_toggle_led+0x14>
 ab2:	46c0      	nop			; (mov r8, r8)
 ab4:	20000040 	.word	0x20000040
 ab8:	41004400 	.word	0x41004400
 abc:	41004480 	.word	0x41004480

00000ac0 <configure_tc_callbacks>:

void configure_tc_callbacks(void)
{
 ac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 ac2:	46ce      	mov	lr, r9
 ac4:	4647      	mov	r7, r8
 ac6:	b580      	push	{r7, lr}
	tc_register_callback(&tc_instance, tc_callback_to_toggle_led,
 ac8:	4e21      	ldr	r6, [pc, #132]	; (b50 <configure_tc_callbacks+0x90>)
 aca:	4c22      	ldr	r4, [pc, #136]	; (b54 <configure_tc_callbacks+0x94>)
 acc:	2200      	movs	r2, #0
 ace:	0031      	movs	r1, r6
 ad0:	0020      	movs	r0, r4
 ad2:	4d21      	ldr	r5, [pc, #132]	; (b58 <configure_tc_callbacks+0x98>)
 ad4:	47a8      	blx	r5
	TC_CALLBACK_OVERFLOW);
	tc_register_callback(&tc_instance, tc_callback_to_toggle_led,
 ad6:	2202      	movs	r2, #2
 ad8:	0031      	movs	r1, r6
 ada:	0020      	movs	r0, r4
 adc:	47a8      	blx	r5
	TC_CALLBACK_CC_CHANNEL0);
	tc_register_callback(&tc_instance, tc_callback_to_toggle_led,
 ade:	2203      	movs	r2, #3
 ae0:	0031      	movs	r1, r6
 ae2:	0020      	movs	r0, r4
 ae4:	47a8      	blx	r5
	/* Sanity check arguments */
	Assert(module);


	/* Enable interrupts for this TC module */
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
 ae6:	6820      	ldr	r0, [r4, #0]
 ae8:	4b1c      	ldr	r3, [pc, #112]	; (b5c <configure_tc_callbacks+0x9c>)
 aea:	4699      	mov	r9, r3
 aec:	4798      	blx	r3
	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
 aee:	4b1c      	ldr	r3, [pc, #112]	; (b60 <configure_tc_callbacks+0xa0>)
 af0:	4698      	mov	r8, r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
 af2:	5c1b      	ldrb	r3, [r3, r0]
 af4:	261f      	movs	r6, #31
 af6:	4033      	ands	r3, r6
 af8:	2501      	movs	r5, #1
 afa:	002a      	movs	r2, r5
 afc:	409a      	lsls	r2, r3
 afe:	4f19      	ldr	r7, [pc, #100]	; (b64 <configure_tc_callbacks+0xa4>)
 b00:	603a      	str	r2, [r7, #0]
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
		module->enable_callback_mask |= TC_INTFLAG_MC(2);
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(2);
	}
	else {
		module->enable_callback_mask |= (1 << callback_type);
 b02:	7e63      	ldrb	r3, [r4, #25]
 b04:	2201      	movs	r2, #1
 b06:	4313      	orrs	r3, r2
 b08:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = (1 << callback_type);
 b0a:	6823      	ldr	r3, [r4, #0]
 b0c:	735d      	strb	r5, [r3, #13]
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
 b0e:	0018      	movs	r0, r3
 b10:	47c8      	blx	r9
 b12:	4643      	mov	r3, r8
 b14:	5c1b      	ldrb	r3, [r3, r0]
 b16:	4033      	ands	r3, r6
 b18:	002a      	movs	r2, r5
 b1a:	409a      	lsls	r2, r3
 b1c:	603a      	str	r2, [r7, #0]
		module->enable_callback_mask |= TC_INTFLAG_MC(1);
 b1e:	7e63      	ldrb	r3, [r4, #25]
 b20:	2210      	movs	r2, #16
 b22:	4313      	orrs	r3, r2
 b24:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(1);
 b26:	2310      	movs	r3, #16
 b28:	6822      	ldr	r2, [r4, #0]
 b2a:	7353      	strb	r3, [r2, #13]
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
 b2c:	0010      	movs	r0, r2
 b2e:	47c8      	blx	r9
 b30:	4643      	mov	r3, r8
 b32:	5c1b      	ldrb	r3, [r3, r0]
 b34:	401e      	ands	r6, r3
 b36:	40b5      	lsls	r5, r6
 b38:	603d      	str	r5, [r7, #0]
		module->enable_callback_mask |= TC_INTFLAG_MC(2);
 b3a:	7e63      	ldrb	r3, [r4, #25]
 b3c:	2220      	movs	r2, #32
 b3e:	4313      	orrs	r3, r2
 b40:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(2);
 b42:	6823      	ldr	r3, [r4, #0]
 b44:	2220      	movs	r2, #32
 b46:	735a      	strb	r2, [r3, #13]
	TC_CALLBACK_CC_CHANNEL1);
	tc_enable_callback(&tc_instance, TC_CALLBACK_OVERFLOW);
	tc_enable_callback(&tc_instance, TC_CALLBACK_CC_CHANNEL0);
	tc_enable_callback(&tc_instance, TC_CALLBACK_CC_CHANNEL1);
}
 b48:	bc0c      	pop	{r2, r3}
 b4a:	4690      	mov	r8, r2
 b4c:	4699      	mov	r9, r3
 b4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 b50:	00000a79 	.word	0x00000a79
 b54:	20000058 	.word	0x20000058
 b58:	00000391 	.word	0x00000391
 b5c:	00000115 	.word	0x00000115
 b60:	00000c88 	.word	0x00000c88
 b64:	e000e100 	.word	0xe000e100

00000b68 <configure_tc>:

void configure_tc(void)
{
 b68:	b510      	push	{r4, lr}
 b6a:	b08e      	sub	sp, #56	; 0x38
{
	/* Sanity check arguments */
	Assert(config);

	/* Write default config to config struct */
	config->clock_source               = GCLK_GENERATOR_0;
 b6c:	aa01      	add	r2, sp, #4
 b6e:	2300      	movs	r3, #0
 b70:	2100      	movs	r1, #0
 b72:	7013      	strb	r3, [r2, #0]
	config->counter_size               = TC_COUNTER_SIZE_16BIT;
	config->clock_prescaler            = TC_CLOCK_PRESCALER_DIV1;
	config->wave_generation            = TC_WAVE_GENERATION_NORMAL_FREQ;
 b74:	7193      	strb	r3, [r2, #6]
	config->reload_action              = TC_RELOAD_ACTION_GCLK;
 b76:	8113      	strh	r3, [r2, #8]
	config->run_in_standby             = false;
 b78:	2000      	movs	r0, #0
 b7a:	7050      	strb	r0, [r2, #1]
#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30) || (SAMR34) || (SAMR35) || (WLR089)
	config->on_demand                  = false;
#endif
	config->waveform_invert_output     = TC_WAVEFORM_INVERT_OUTPUT_NONE;
 b7c:	7291      	strb	r1, [r2, #10]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
 b7e:	72d1      	strb	r1, [r2, #11]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
 b80:	7311      	strb	r1, [r2, #12]
#ifdef 	FEATURE_TC_IO_CAPTURE
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
#endif

	config->count_direction            = TC_COUNT_DIRECTION_UP;
 b82:	7391      	strb	r1, [r2, #14]
	config->oneshot                    = false;
 b84:	7351      	strb	r1, [r2, #13]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = false;
 b86:	7411      	strb	r1, [r2, #16]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = 0;
 b88:	6153      	str	r3, [r2, #20]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_mux = 0;
 b8a:	6193      	str	r3, [r2, #24]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
 b8c:	7711      	strb	r1, [r2, #28]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
 b8e:	6213      	str	r3, [r2, #32]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = 0;
 b90:	6253      	str	r3, [r2, #36]	; 0x24

	config->counter_16_bit.value                   = 0x0000;
 b92:	8513      	strh	r3, [r2, #40]	; 0x28
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_0]                        = 0x0000;
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_1]                        = 0x0000;
 b94:	8593      	strh	r3, [r2, #44]	; 0x2c
	struct tc_config config_tc;
	tc_get_config_defaults(&config_tc);
	config_tc.counter_size = TC_COUNTER_SIZE_8BIT;
 b96:	3304      	adds	r3, #4
 b98:	7093      	strb	r3, [r2, #2]
	config_tc.clock_source = GCLK_GENERATOR_0;

	config_tc.clock_prescaler = TC_CLOCK_PRESCALER_DIV1024;
 b9a:	23e0      	movs	r3, #224	; 0xe0
 b9c:	00db      	lsls	r3, r3, #3
 b9e:	8093      	strh	r3, [r2, #4]
	config_tc.counter_8_bit.period = 8;
 ba0:	2108      	movs	r1, #8
 ba2:	2329      	movs	r3, #41	; 0x29
 ba4:	54d1      	strb	r1, [r2, r3]
	config_tc.counter_8_bit.compare_capture_channel[0] = 50;
 ba6:	312a      	adds	r1, #42	; 0x2a
 ba8:	3301      	adds	r3, #1
 baa:	54d1      	strb	r1, [r2, r3]
	config_tc.counter_8_bit.compare_capture_channel[1] = 54;
 bac:	3104      	adds	r1, #4
 bae:	3301      	adds	r3, #1
 bb0:	54d1      	strb	r1, [r2, r3]
	tc_init(&tc_instance, CONF_TC_MODULE, &config_tc);
 bb2:	4c08      	ldr	r4, [pc, #32]	; (bd4 <configure_tc+0x6c>)
 bb4:	4908      	ldr	r1, [pc, #32]	; (bd8 <configure_tc+0x70>)
 bb6:	0020      	movs	r0, r4
 bb8:	4b08      	ldr	r3, [pc, #32]	; (bdc <configure_tc+0x74>)
 bba:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
 bbc:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
 bbe:	7bd3      	ldrb	r3, [r2, #15]

	while (tc_is_syncing(module_inst)) {
 bc0:	b25b      	sxtb	r3, r3
 bc2:	2b00      	cmp	r3, #0
 bc4:	dbfb      	blt.n	bbe <configure_tc+0x56>
		/* Wait for sync */
	}

	/* Enable TC module */
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
 bc6:	8813      	ldrh	r3, [r2, #0]
 bc8:	2102      	movs	r1, #2
 bca:	430b      	orrs	r3, r1
 bcc:	8013      	strh	r3, [r2, #0]
	tc_enable(&tc_instance);
}
 bce:	b00e      	add	sp, #56	; 0x38
 bd0:	bd10      	pop	{r4, pc}
 bd2:	46c0      	nop			; (mov r8, r8)
 bd4:	20000058 	.word	0x20000058
 bd8:	42002c00 	.word	0x42002c00
 bdc:	00000151 	.word	0x00000151

00000be0 <main>:

int main (void)
{
 be0:	b510      	push	{r4, lr}
	system_init();
 be2:	4b03      	ldr	r3, [pc, #12]	; (bf0 <main+0x10>)
 be4:	4798      	blx	r3
	
    configure_tc();
 be6:	4b03      	ldr	r3, [pc, #12]	; (bf4 <main+0x14>)
 be8:	4798      	blx	r3
    configure_tc_callbacks();
 bea:	4b03      	ldr	r3, [pc, #12]	; (bf8 <main+0x18>)
 bec:	4798      	blx	r3
 bee:	e7fe      	b.n	bee <main+0xe>
 bf0:	00000965 	.word	0x00000965
 bf4:	00000b69 	.word	0x00000b69
 bf8:	00000ac1 	.word	0x00000ac1

00000bfc <__libc_init_array>:
 bfc:	b570      	push	{r4, r5, r6, lr}
 bfe:	2600      	movs	r6, #0
 c00:	4d0c      	ldr	r5, [pc, #48]	; (c34 <__libc_init_array+0x38>)
 c02:	4c0d      	ldr	r4, [pc, #52]	; (c38 <__libc_init_array+0x3c>)
 c04:	1b64      	subs	r4, r4, r5
 c06:	10a4      	asrs	r4, r4, #2
 c08:	42a6      	cmp	r6, r4
 c0a:	d109      	bne.n	c20 <__libc_init_array+0x24>
 c0c:	2600      	movs	r6, #0
 c0e:	f000 f83f 	bl	c90 <_init>
 c12:	4d0a      	ldr	r5, [pc, #40]	; (c3c <__libc_init_array+0x40>)
 c14:	4c0a      	ldr	r4, [pc, #40]	; (c40 <__libc_init_array+0x44>)
 c16:	1b64      	subs	r4, r4, r5
 c18:	10a4      	asrs	r4, r4, #2
 c1a:	42a6      	cmp	r6, r4
 c1c:	d105      	bne.n	c2a <__libc_init_array+0x2e>
 c1e:	bd70      	pop	{r4, r5, r6, pc}
 c20:	00b3      	lsls	r3, r6, #2
 c22:	58eb      	ldr	r3, [r5, r3]
 c24:	4798      	blx	r3
 c26:	3601      	adds	r6, #1
 c28:	e7ee      	b.n	c08 <__libc_init_array+0xc>
 c2a:	00b3      	lsls	r3, r6, #2
 c2c:	58eb      	ldr	r3, [r5, r3]
 c2e:	4798      	blx	r3
 c30:	3601      	adds	r6, #1
 c32:	e7f2      	b.n	c1a <__libc_init_array+0x1e>
 c34:	00000c9c 	.word	0x00000c9c
 c38:	00000c9c 	.word	0x00000c9c
 c3c:	00000c9c 	.word	0x00000c9c
 c40:	00000ca0 	.word	0x00000ca0
 c44:	42002c00 	.word	0x42002c00
 c48:	42003000 	.word	0x42003000
 c4c:	42003400 	.word	0x42003400
 c50:	42003800 	.word	0x42003800
 c54:	42003c00 	.word	0x42003c00
 c58:	10000800 	.word	0x10000800
 c5c:	40002000 	.word	0x40002000
 c60:	00008000 	.word	0x00008000
 c64:	000005ac 	.word	0x000005ac
 c68:	0000058c 	.word	0x0000058c
 c6c:	0000058c 	.word	0x0000058c
 c70:	00000618 	.word	0x00000618
 c74:	0000059e 	.word	0x0000059e
 c78:	000005ba 	.word	0x000005ba
 c7c:	00000590 	.word	0x00000590
 c80:	000005c8 	.word	0x000005c8
 c84:	00000608 	.word	0x00000608

00000c88 <tc_interrupt_vectors.12420>:
 c88:	15141312 00000016                       ........

00000c90 <_init>:
 c90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 c92:	46c0      	nop			; (mov r8, r8)
 c94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 c96:	bc08      	pop	{r3}
 c98:	469e      	mov	lr, r3
 c9a:	4770      	bx	lr

00000c9c <__init_array_start>:
 c9c:	000000dd 	.word	0x000000dd

00000ca0 <_fini>:
 ca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 ca2:	46c0      	nop			; (mov r8, r8)
 ca4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 ca6:	bc08      	pop	{r3}
 ca8:	469e      	mov	lr, r3
 caa:	4770      	bx	lr

00000cac <__fini_array_start>:
 cac:	000000b5 	.word	0x000000b5
